{"version":3,"sources":["components/space/space.js","App.js","serviceWorker.js","index.js"],"names":["Space","title","width","height","src","scrolling","frameBorder","allow","allowFullScreen","className","id","App","Location","fetch","then","response","json","data","lat","latitude","longi","longitude","country","status","state","loc","setState","countryName","window","setInterval","this","console","log","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6QA6BeA,G,YAxBD,WACb,OACA,6BACC,4BAAQC,MAAM,IAAIC,MAAM,OAAOC,OAAO,OAAOC,IAAI,kEAAkEC,UAAU,KAC7HC,YAAY,IAAIC,MAAM,8FAEtBC,iBAAe,IAChB,6BACC,yBAAKC,UAAU,YAAf,oCAKD,yBAAKC,GAAG,cACR,+CC6CcC,E,kDAhCb,aAAc,IAAD,8BACX,gBA1BFC,SAAW,WAETC,MAAM,kDACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAEF,IAAIC,EAAMD,EAAKE,SACXC,EAAQH,EAAKI,UACjBR,MAAM,8FAAD,OAA+FK,EAA/F,gBAA0GE,IAC9GN,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAQ,GACgB,WAAjBA,EAAQC,OACW,8BAAjB,EAAKC,MAAMC,KACZ,EAAKC,SAAS,CAACD,IAAI,8BAIrB,EAAKC,SAAS,CAACD,IAAIH,EAAQK,qBAUnC,EAAKH,MAAM,CACTC,IAAM,IAHG,E,qDAYX,OAHAG,OAAOC,YAAYC,KAAKlB,WAAW,KACnCmB,QAAQC,IAAIF,KAAKN,MAAMC,KACvBK,KAAKlB,WAEH,yBAAKF,GAAG,OACN,kBAAC,EAAD,MACA,4BAAKoB,KAAKN,MAAMC,U,GAzCNQ,IAAMC,WCMJC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.398db86a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './spaceStyle.css'\r\n\r\n\r\n\r\nconst Space = () =>{\r\n\treturn(\r\n\t<div>\r\n\t\t<iframe title=\"1\" width=\"1920\" height=\"1080\" src=\"https://www.youtube.com/embed/XBPjVzSoepo?controls=0&autoplay=1\" scrolling=\"no\" \r\n\t\tframeBorder=\"0\" allow=\"accelerometer; autoplay; \r\n\t\tclipboard-write; encrypted-media; gyroscope; picture-in-picture\" \r\n\t\tallowFullScreen></iframe>\r\n\t<nav>\r\n\t\t<div className=\"listcont\">\r\n\t\t\tTHE INTERNATIONAL SPACE STATION\t\r\n\t\t</div>\r\n\t\t\r\n\t</nav>\r\n\t<div id=\"helloWorld\">\r\n\t<h1>\r\n\t\tHELLO WORLD\r\n\t</h1>\r\n\t</div>\r\n\t\r\n\t</div>\t\t\t\r\n\t\t\r\n\t);\t\r\n}\r\n\r\nexport default Space;","import React from 'react';\nimport './App.css';\nimport Space from './components/space/space.js'\n\n\n\nclass App extends React.Component {\n  Location = () =>{\n    \n    fetch('https://api.wheretheiss.at/v1/satellites/25544')\n    .then(response=>response.json())\n    .then(data=>{\n        // this.setState({latitude:data.latitude,longitude:data.longitude});\n        let lat = data.latitude;\n        let longi = data.longitude;\n        fetch(`https://api.timezonedb.com/v2.1/get-time-zone?key=T8546H6U13P4&format=json&by=position&lat=${lat}&lng=${longi}`)\n        .then(response=>response.json())\n        .then(country=>{\n          if(country.status===\"FAILED\"){\n            if(this.state.loc!==\"over international waters\"){\n              this.setState({loc:\"over international waters\"});\n            }\n          }\n          else{\n            this.setState({loc:country.countryName})\n          }\n          \n        });\n    });\n  }\n\n  \n  constructor(){\n    super();\n    this.state={\n      loc : \"\"\n    }\n    \n  }\n\n  render(){\n    window.setInterval(this.Location(),10000);\n    console.log(this.state.loc);\n    this.Location();\n    return(\n      <div id=\"App\">\n        <Space/>\n        <h2>{this.state.loc}</h2>\n      </div>\n    );\n\n  }\n\n\n}\n\n// function App() {\n//   return (\n//     <div id=\"App\">\n      \n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}